#include <iostream>
#include <string>
#include <regex>
#include <map>
#include <algorithm>

bool isLeapYear(int year) {
    return (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
}

std::string to_lower(const std::string& s) {
    std::string res = s;
    std::transform(res.begin(), res.end(), res.begin(), [](unsigned char c){ return std::tolower(c); });
    return res;
}

// Карта для русских месяцев (именительный и родительный падеж)
const std::map<std::string, int> months = {
    {"январь", 1},   {"января", 1},
    {"февраль", 2},  {"февраля", 2},
    {"март", 3},     {"марта", 3},
    {"апрель", 4},   {"апреля", 4},
    {"май", 5},      {"мая", 5},
    {"июнь", 6},     {"июня", 6},
    {"июль", 7},     {"июля", 7},
    {"август", 8},   {"августа", 8},
    {"сентябрь", 9}, {"сентября", 9},
    {"октябрь", 10}, {"октября", 10},
    {"ноябрь", 11},  {"ноября", 11},
    {"декабрь", 12}, {"декабря", 12}
};

bool checkDate(const std::string& date) {
    std::smatch m;
    // dd.mm.yyyy, dd/mm/yyyy, dd-mm-yyyy
    std::regex date1(R"(^(\d{1,2})[./-](\d{1,2})[./-](\d{4})$)");
    // yyyy.mm.dd
    std::regex date2(R"(^(\d{4})[./-](\d{1,2})[./-](\d{1,2})$)");
    // 20 января 1806 (или любой падеж)
    std::regex date_rus(R"(^\s*(\d{1,2})\s+([А-Яа-яёЁ]+)\s+(\d{4})\s*$)");
    // July 25, 1924
    std::regex date_eng(R"(^([A-Za-z]+)\s+(\d{1,2}),\s*(\d{4})$)");

    // dd.mm.yyyy
    if (std::regex_match(date, m, date1)) {
        int day = std::stoi(m[1]), mon = std::stoi(m[2]), year = std::stoi(m[3]);
        int mdays[] = {31, (isLeapYear(year)?29:28), 31,30,31,30,31,31,30,31,30,31};
        if (mon < 1 || mon > 12) return false;
        if (day < 1 || day > mdays[mon-1]) return false;
        return true;
    }
    // yyyy.mm.dd
    if (std::regex_match(date, m, date2)) {
        int year = std::stoi(m[1]), mon = std::stoi(m[2]), day = std::stoi(m[3]);
        int mdays[] = {31, (isLeapYear(year)?29:28), 31,30,31,30,31,31,30,31,30,31};
        if (mon < 1 || mon > 12) return false;
        if (day < 1 || day > mdays[mon-1]) return false;
        return true;
    }
    // Русский формат: 20 января 1806 (поддержка регистра и падежей)
    if (std::regex_match(date, m, date_rus)) {
        int day = std::stoi(m[1]);
        std::string month = to_lower(m[2]);
        int year = std::stoi(m[3]);
        auto it = months.find(month);
        if (it == months.end()) {
            std::cout << "Месяц \"" << month << "\" не распознан." << std::endl;
            return false;
        }
        int mon = it->second;
        int mdays[] = {31, (isLeapYear(year)?29:28), 31,30,31,30,31,31,30,31,30,31};
        if (day < 1 || day > mdays[mon-1]) return false;
        return true;
    }
    // English: July 25, 1924
    std::map<std::string, int> months_en = {
        {"january", 1}, {"february", 2}, {"march", 3}, {"april", 4}, {"may", 5}, {"june", 6},
        {"july", 7}, {"august", 8}, {"september", 9}, {"october", 10}, {"november", 11}, {"december", 12}
    };
    if (std::regex_match(date, m, date_eng)) {
        std::string month = to_lower(m[1]);
        int day = std::stoi(m[2]);
        int year = std::stoi(m[3]);
        auto it = months_en.find(month);
        if (it == months_en.end()) {
            std::cout << "Month \"" << month << "\" not recognized." << std::endl;
            return false;
        }
        int mon = it->second;
        int mdays[] = {31, (isLeapYear(year)?29:28), 31,30,31,30,31,31,30,31,30,31};
        if (day < 1 || day > mdays[mon-1]) return false;
        return true;
    }
    return false;
}

int main() {
    std::string date;
    std::cout << "Введите дату: ";
    std::getline(std::cin, date);

    if (checkDate(date))
        std::cout << "Корректная дата!" << std::endl;
    else
        std::cout << "Некорректная дата." << std::endl;

    return 0;
}
