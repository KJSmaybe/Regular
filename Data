#include <iostream>
#include <string>
#include <regex>
#include <map>

bool isLeapYear(int year) {
    return (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
}

// Карта для русских месяцев
const std::map<std::string, int> months = {
    {"января", 1}, {"февраля", 2}, {"марта", 3}, {"апреля", 4}, {"мая", 5}, {"июня", 6},
    {"июля", 7}, {"августа", 8}, {"сентября", 9}, {"октября", 10}, {"ноября", 11}, {"декабря", 12}
};

bool checkDate(const std::string& date) {
    std::smatch m;

    // 1. dd.mm.yyyy, dd/mm/yyyy, dd-mm-yyyy, yyyy-mm-dd, yyyy/mm/dd, yyyy.mm.dd
    std::regex date1(R"(^(\d{1,2})[./-](\d{1,2})[./-](\d{4})$)");
    std::regex date2(R"(^(\d{4})[./-](\d{1,2})[./-](\d{1,2})$)");
    // 2. "20 января 1806"
    std::regex date_rus(R"(^(\d{1,2})\s([а-яА-Я]+)\s(\d{4})$)");

    // 3. "July 25, 1924"
    std::regex date_eng(R"(^([A-Za-z]+)\s(\d{1,2}),\s(\d{4})$)");

    // dd.mm.yyyy
    if (std::regex_match(date, m, date1)) {
        int day = std::stoi(m[1]), mon = std::stoi(m[2]), year = std::stoi(m[3]);
        int mdays[] = {31, (isLeapYear(year)?29:28), 31,30,31,30,31,31,30,31,30,31};
        if (mon < 1 || mon > 12) return false;
        if (day < 1 || day > mdays[mon-1]) return false;
        return true;
    }
    // yyyy.mm.dd
    if (std::regex_match(date, m, date2)) {
        int year = std::stoi(m[1]), mon = std::stoi(m[2]), day = std::stoi(m[3]);
        int mdays[] = {31, (isLeapYear(year)?29:28), 31,30,31,30,31,31,30,31,30,31};
        if (mon < 1 || mon > 12) return false;
        if (day < 1 || day > mdays[mon-1]) return false;
        return true;
    }
    // Русский формат: 20 января 1806
    if (std::regex_match(date, m, date_rus)) {
        int day = std::stoi(m[1]);
        std::string month = m[2];
        int year = std::stoi(m[3]);
        auto it = months.find(month);
        if (it == months.end()) return false;
        int mon = it->second;
        int mdays[] = {31, (isLeapYear(year)?29:28), 31,30,31,30,31,31,30,31,30,31};
        if (day < 1 || day > mdays[mon-1]) return false;
        return true;
    }
    // Английский формат: July 25, 1924 (добавить карту для англ. месяцев по аналогии)
    std::map<std::string, int> months_en = {
        {"January", 1}, {"February", 2}, {"March", 3}, {"April", 4}, {"May", 5}, {"June", 6},
        {"July", 7}, {"August", 8}, {"September", 9}, {"October", 10}, {"November", 11}, {"December", 12}
    };
    if (std::regex_match(date, m, date_eng)) {
        std::string month = m[1];
        int day = std::stoi(m[2]);
        int year = std::stoi(m[3]);
        auto it = months_en.find(month);
        if (it == months_en.end()) return false;
        int mon = it->second;
        int mdays[] = {31, (isLeapYear(year)?29:28), 31,30,31,30,31,31,30,31,30,31};
        if (day < 1 || day > mdays[mon-1]) return false;
        return true;
    }

    // Можно добавить и другие форматы аналогично!
    return false;
}

int main() {
    std::string date;
    std::cout << "Введите дату: ";
    std::getline(std::cin, date);

    if (checkDate(date))
        std::cout << "Корректная дата!" << std::endl;
    else
        std::cout << "Некорректная дата." << std::endl;

    return 0;
}
