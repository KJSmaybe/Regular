#ifdef _WIN32
#include <windows.h>
#include <io.h>
#include <fcntl.h>
#endif

#include <locale>
#include <iostream>
#include <string>
#include <algorithm>
#include <cctype>
#include <vector>
#include <sstream>
#include <map>

using std::wstring;
using std::wcin;
using std::wcout;
using std::getline;
using std::vector;
using std::map;

// trim для wstring
static inline wstring trim(const wstring& s) {
    size_t l = s.find_first_not_of(L" \t\r\n");
    if (l == wstring::npos) return L"";
    size_t r = s.find_last_not_of(L" \t\r\n");
    return s.substr(l, r - l + 1);
}

// split по одному символу-разделителю
static inline vector<wstring> split(const wstring& s, wchar_t sep) {
    vector<wstring> out;
    std::wistringstream ss(s);
    wstring cur;
    while (std::getline(ss, cur, sep)) {
        out.push_back(trim(cur));
    }
    return out;
}

// проверка, что строка — неотрицательное целое [minv..maxv]
bool is_int_in_range(const wstring& tok, int minv, int maxv) {
    if (tok.empty()) return false;
    for (wchar_t c : tok) {
        if (!iswdigit(c)) return false;
    }
    int x = std::stoi(tok);
    return x >= minv && x <= maxv;
}

// високосный год
bool is_leap(int y) {
    return (y % 4 == 0 && y % 100 != 0) || (y % 400 == 0);
}

// дней в месяце m для года y
int days_in_month(int m, int y) {
    static const int mdays[] = { 0,31,28,31,30,31,30,31,31,30,31,30,31 };
    if (m < 1 || m>12) return 0;
    if (m == 2 && is_leap(y)) return 29;
    return mdays[m];
}

// цифровые форматы d.m.y, d/m/y, d-m-y и зеркально y.m.d и т.д.
bool check_numeric(const wstring& s) {
    for (wchar_t sep : {L'.', L'/', L'-'}) {
        if (s.find(sep) == wstring::npos) continue;
        auto p = split(s, sep);
        if (p.size() != 3) continue;
        // d-m-y
        if (is_int_in_range(p[0], 1, 31)
            && is_int_in_range(p[1], 1, 12)
            && is_int_in_range(p[2], 0, 9999))
        {
            int d = std::stoi(p[0]), m = std::stoi(p[1]), y = std::stoi(p[2]);
            if (d <= days_in_month(m, y)) return true;
        }
        // y-m-d
        if (is_int_in_range(p[0], 0, 9999)
            && is_int_in_range(p[1], 1, 12)
            && is_int_in_range(p[2], 1, 31))
        {
            int y = std::stoi(p[0]), m = std::stoi(p[1]), d = std::stoi(p[2]);
            if (d <= days_in_month(m, y)) return true;
        }
    }
    return false;
}

// русский формат "день месяц_рус год"
bool check_rus(const wstring& s) {
    std::wistringstream ss(s);
    wstring day, mon, year;
    if (!(ss >> day >> mon >> year)) return false;
    if (!is_int_in_range(day, 1, 31) || !is_int_in_range(year, 0, 9999))
        return false;

    static const map<wstring, int> mon_ru = {
        {L"января",1},{L"февраля",2},{L"марта",3},{L"апреля",4},
        {L"мая",5},{L"июня",6},{L"июля",7},{L"августа",8},
        {L"сентября",9},{L"октября",10},{L"ноября",11},{L"декабря",12}
    };
    auto it = mon_ru.find(mon);
    if (it == mon_ru.end()) return false;

    int d = std::stoi(day), m = it->second, y = std::stoi(year);
    return d <= days_in_month(m, y);
}

// английские форматы: MonthName Day, Year  или  Year, MonthName Day
bool check_eng(const wstring& s) {
    static const map<wstring, int> mon_en = {
        {L"january",1},{L"february",2},{L"march",3},{L"april",4},
        {L"may",5},{L"june",6},{L"july",7},{L"august",8},
        {L"september",9},{L"october",10},{L"november",11},{L"december",12},
        {L"jan",1},{L"feb",2},{L"mar",3},{L"apr",4},
        {L"may",5},{L"jun",6},{L"jul",7},{L"aug",8},
        {L"sep",9},{L"oct",10},{L"nov",11},{L"dec",12}
    };
    size_t pos = s.find(L',');
    if (pos == wstring::npos) return false;
    wstring L = trim(s.substr(0, pos));
    wstring R = trim(s.substr(pos + 1));

    // MonthName Day, Year
    {
        size_t sp = L.rfind(L' ');
        if (sp != wstring::npos) {
            wstring mname = L.substr(0, sp);
            wstring day = L.substr(sp + 1);
            wstring year = R;
            std::transform(mname.begin(), mname.end(), mname.begin(), ::towlower);
            auto it = mon_en.find(mname);
            if (it != mon_en.end()
                && is_int_in_range(day, 1, 31)
                && is_int_in_range(year, 0, 9999))
            {
                int d = std::stoi(day),
                    m = it->second,
                    y = std::stoi(year);
                if (d <= days_in_month(m, y))
                    return true;
            }
        }
    }
    // Year, MonthName Day
    if (is_int_in_range(L, 0, 9999)) {
        size_t sp = R.find(L' ');
        if (sp != wstring::npos) {
            wstring mname = R.substr(0, sp);
            wstring day = R.substr(sp + 1);
            std::transform(mname.begin(), mname.end(), mname.begin(), ::towlower);
            auto it = mon_en.find(mname);
            if (it != mon_en.end() && is_int_in_range(day, 1, 31)) {
                int d = std::stoi(day),
                    m = it->second,
                    y = std::stoi(L);
                if (d <= days_in_month(m, y))
                    return true;
            }
        }
    }
    return false;
}

// Общая проверка
bool is_valid_date(const wstring& s) {
    wstring t = trim(s);
    return check_numeric(t)
        || check_rus(t)
        || check_eng(t);
}

int main() {
    // 1) Системная локаль из окружения (для Linux/Mac UTF-8 хватает этого)
    std::locale::global(std::locale(""));

#ifdef _WIN32
    // 2) В Windows переводим консоль в UTF-8 и ставим wide-режим
    SetConsoleCP(CP_UTF8);
    SetConsoleOutputCP(CP_UTF8);
    _setmode(_fileno(stdin), _O_U16TEXT);
    _setmode(_fileno(stdout), _O_U16TEXT);
#endif

    wstring line;
    wcout << L"Введите дату (пустая строка — выход):\n";
    while (getline(wcin, line)) {
        if (line.empty()) break;
        bool ok = is_valid_date(line);
        wcout << L" → " << (ok ? L"VALID\n\n" : L"INVALID\n\n")
            << L"Ещё дата (или пустая строка):\n";
    }
    return 0;
}
