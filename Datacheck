#include <iostream>
#include <string>
#include <cctype>
#include <vector>
#include <algorithm>

// Помощники
static int parseInt(const std::string& s, size_t pos, size_t len) {
    if (len==0) return -1;
    int v=0;
    for (size_t i=0;i<len;++i) {
        if (!std::isdigit(s[pos+i])) return -1;
        v = v*10 + (s[pos+i]-'0');
    }
    return v;
}
static std::vector<std::string> split(const std::string& s, const std::string& delims) {
    std::vector<std::string> res;
    size_t i=0,n=s.size();
    while (i<n) {
        while (i<n && delims.find(s[i])!=std::string::npos) ++i;
        if (i>=n) break;
        size_t j=i;
        while (j<n && delims.find(s[j])==std::string::npos) ++j;
        res.emplace_back(s.substr(i,j-i));
        i=j;
    }
    return res;
}
static bool iequals(const std::string& a, const std::string& b) {
    if (a.size()!=b.size()) return false;
    for (size_t i=0;i<a.size();++i)
        if (std::tolower(a[i])!=std::tolower(b[i])) return false;
    return true;
}

// Проверка
bool isValidDate(const std::string& raw) {
    size_t b=0,e=raw.size();
    while (b<e && std::isspace(raw[b])) ++b;
    while (e>b && std::isspace(raw[e-1])) --e;
    std::string s = raw.substr(b,e-b);
    if (s.empty()) return false;

    // Numeric: dd.mm.yyyy или yyyy-mm-dd и т.п.
    static const std::string D=".-/";
    auto tok = split(s,D);
    if (tok.size()==3) {
        bool firstYear = (tok[0].size()==4 && parseInt(tok[0],0,4)>=0);
        bool thirdYear = (tok[2].size()==4 && parseInt(tok[2],0,4)>=0);
        if (firstYear ^ thirdYear) {
            int day,mon,yr;
            if (firstYear) {
                yr= parseInt(tok[0],0,tok[0].size());
                mon= parseInt(tok[1],0,tok[1].size());
                day= parseInt(tok[2],0,tok[2].size());
            } else {
                day= parseInt(tok[0],0,tok[0].size());
                mon= parseInt(tok[1],0,tok[1].size());
                yr=  parseInt(tok[2],0,tok[2].size());
            }
            if (yr<0||mon<1||mon>12||day<1||day>31) return false;
            return true;
        }
    }

    // Русский: "14 января 1806"
    auto w = split(s," ,");
    if (w.size()==3) {
        int day = parseInt(w[0],0,w[0].size());
        int yr  = parseInt(w[2],0,w[2].size());
        if (day<1||day>31||yr<0) return false;
        static const std::vector<std::string> rus = {
            "января","февраля","марта","апреля","мая","июня",
            "июля","августа","сентября","октября","ноября","декабря"
        };
        for (auto& m: rus) if (iequals(w[1],m)) return true;
    }

    // Английский: "July 25, 1924" или "Sep 14, 1995"
    if (w.size()==3 && w[1].back()==',') {
        std::string mon = w[0];
        int day = parseInt(w[1],0,w[1].size()-1);
        int yr  = parseInt(w[2],0,w[2].size());
        if (day<1||day>31||yr<0) return false;
        static const std::vector<std::string> engFull = {
            "January","February","March","April","May","June",
            "July","August","September","October","November","December"
        };
        static const std::vector<std::string> engAbbr = {
            "Jan","Feb","Mar","Apr","May","Jun",
            "Jul","Aug","Sep","Oct","Nov","Dec"
        };
        for (auto& m: engFull) if (iequals(mon,m)) return true;
        for (auto& m: engAbbr) if (iequals(mon,m)) return true;
    }

    return false;
}

int main(){
    std::string line;
    std::cout<<"Введите дату: ";
    std::getline(std::cin,line);
    std::cout<<(isValidDate(line)?"OK\n":"FAIL\n");
    return 0;
}

