#include <iostream>
#include <string>
#include <cctype>
#include <vector>
#include <sstream>
#include <algorithm>

// Вспомогательные функции из предыдущего примера:
static bool isHexDigit(char c) {
    c = std::tolower(c);
    return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f');
}
static int parseInt(const std::string& s, size_t pos, size_t len) {
    if (len == 0) return -1;
    int v = 0;
    for (size_t i = 0; i < len; ++i) {
        if (!std::isdigit(s[pos+i])) return -1;
        v = v*10 + (s[pos+i]-'0');
    }
    return v;
}
static bool parsePercent(const std::string& t, int& out) {
    if (t.empty() || t.back()!='%') return false;
    int v = parseInt(t,0,t.size()-1);
    if (v<0 || v>100) return false;
    out = v; return true;
}
static std::vector<std::string> split(const std::string& s, const std::string& delims) {
    std::vector<std::string> res;
    size_t i=0, n=s.size();
    while (i<n) {
        while (i<n && delims.find(s[i])!=std::string::npos) ++i;
        if (i>=n) break;
        size_t j=i;
        while (j<n && delims.find(s[j])==std::string::npos) ++j;
        res.emplace_back(s.substr(i,j-i));
        i=j;
    }
    return res;
}
static bool iequals(const std::string& a, const std::string& b) {
    if (a.size()!=b.size()) return false;
    for (size_t i=0;i<a.size();++i)
        if (std::tolower(a[i])!=std::tolower(b[i])) return false;
    return true;
}

// Функция проверки
bool isValidWebColor(const std::string& raw) {
    size_t b=0, e=raw.size();
    while (b<e && std::isspace(raw[b])) ++b;
    while (e>b && std::isspace(raw[e-1])) --e;
    if (e-b<4) return false;
    std::string s = raw.substr(b, e-b);

    // HEX
    if (s[0]=='#') {
        if (s.size()==4) {
            return isHexDigit(s[1]) && isHexDigit(s[2]) && isHexDigit(s[3]);
        }
        if (s.size()==7) {
            for (int i=1;i<7;++i) if (!isHexDigit(s[i])) return false;
            return true;
        }
        return false;
    }

    // rgb(...) или hsl(...)
    auto p = s.find('('), q = s.rfind(')');
    if (p==std::string::npos || q==std::string::npos || q<=p) return false;
    std::string name = s.substr(0,p);
    std::string inside = s.substr(p+1, q-p-1);
    auto parts = split(inside, ",");

    if (iequals(name,"rgb")) {
        if (parts.size()!=3) return false;
        for (auto& t0: parts) {
            // трим
            size_t u=0,v=t0.size();
            while (u<v && std::isspace(t0[u])) ++u;
            while (v>u && std::isspace(t0[v-1])) --v;
            std::string t = t0.substr(u,v-u);
            if (t.empty()) return false;
            int val;
            if (t.back()=='%') {
                if (!parsePercent(t,val)) return false;
            } else {
                val = parseInt(t,0,t.size());
                if (val<0||val>255) return false;
            }
        }
        return true;
    }
    if (iequals(name,"hsl")) {
        if (parts.size()!=3) return false;
        // Hue 0–360
        {
            size_t u=0,v=parts[0].size();
            while (u<v && std::isspace(parts[0][u])) ++u;
            while (v>u && std::isspace(parts[0][v-1])) --v;
            int h = parseInt(parts[0],u,v-u);
            if (h<0||h>360) return false;
        }
        // Saturation & Lightness 0–100%
        for (int i=1;i<3;++i) {
            int dummy;
            if (!parsePercent(parts[i], dummy)) return false;
        }
        return true;
    }
    return false;
}

int main(){
    std::string line;
    std::cout<<"Введите web-цвет: ";
    std::getline(std::cin,line);
    std::cout<<(isValidWebColor(line)?"OK\n":"FAIL\n");
    return 0;
}
