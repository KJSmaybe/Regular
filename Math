#include <iostream>
#include <string>
#include <regex>
#include <vector>

struct Token {
    std::string type;
    size_t start, end;
    std::string value;
};

int main() {
    std::string expr;
    std::cout << "Введите выражение: ";
    std::getline(std::cin, expr);

    // Списки функций и констант
    std::string functions = "sin|cos|tg|ctg|tan|cot|sinh|cosh|th|cth|tanh|coth|ln|log|log2|exp|sqrt|cbrt|abs|sign";
    std::string constants = "pi|e|sqrt2|ln2|ln10";

    std::regex token_regex(
        "("
            "(" + functions + ")"                 // функция
            "|(" + constants + ")"                // константа
            "|([a-zA-Z_][a-zA-Z0-9_]*)"           // переменная
            "|(\\d+\\.\\d+|\\d+)"                 // число
            "|([\\^\\*/\\+\\-])"                  // оператор
            "|([\\(\\)])"                         // скобки
        ")"
    );

    std::vector<Token> tokens;
    auto words_begin = std::sregex_iterator(expr.begin(), expr.end(), token_regex);
    auto words_end = std::sregex_iterator();
    for (auto it = words_begin; it != words_end; ++it) {
        size_t pos = it->position();
        size_t len = it->length();
        std::string val = it->str();

        std::string type;
        if (it->str(2).size()) type = "function";
        else if (it->str(3).size()) type = "constant";
        else if (it->str(4).size()) type = "variable";
        else if (it->str(5).size()) type = "number";
        else if (it->str(6).size()) type = "operator";
        else if (it->str(7).size()) type = (val == "(" ? "left_parenthesis" : "right_parenthesis");
        else type = "unknown";

        tokens.push_back({type, pos, pos + len, val});
    }

    // Вывод
    for (auto& t : tokens) {
        std::cout << "{\"type\": \"" << t.type << "\", \"span\": [" << t.start << ", " << t.end << "], \"value\": \"" << t.value << "\"}" << std::endl;
    }
    return 0;
}
